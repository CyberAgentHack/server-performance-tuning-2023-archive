// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	usecase "github.com/CyberAgentHack/server-performance-tuning-2023/pkg/usecase"
	gomock "github.com/golang/mock/gomock"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// BatchGetViewingHistories mocks base method.
func (m *MockUsecase) BatchGetViewingHistories(ctx context.Context, req *usecase.BatchGetViewingHistoriesRequest) (*usecase.BatchGetViewingHistoriesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetViewingHistories", ctx, req)
	ret0, _ := ret[0].(*usecase.BatchGetViewingHistoriesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetViewingHistories indicates an expected call of BatchGetViewingHistories.
func (mr *MockUsecaseMockRecorder) BatchGetViewingHistories(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetViewingHistories", reflect.TypeOf((*MockUsecase)(nil).BatchGetViewingHistories), ctx, req)
}

// CreateViewingHistory mocks base method.
func (m *MockUsecase) CreateViewingHistory(ctx context.Context, req *usecase.CreateViewingHistoryRequest) (*usecase.CreateViewingHistoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateViewingHistory", ctx, req)
	ret0, _ := ret[0].(*usecase.CreateViewingHistoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateViewingHistory indicates an expected call of CreateViewingHistory.
func (mr *MockUsecaseMockRecorder) CreateViewingHistory(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateViewingHistory", reflect.TypeOf((*MockUsecase)(nil).CreateViewingHistory), ctx, req)
}

// ListEpisodes mocks base method.
func (m *MockUsecase) ListEpisodes(ctx context.Context, req *usecase.ListEpisodesRequest) (*usecase.ListEpisodesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEpisodes", ctx, req)
	ret0, _ := ret[0].(*usecase.ListEpisodesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEpisodes indicates an expected call of ListEpisodes.
func (mr *MockUsecaseMockRecorder) ListEpisodes(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEpisodes", reflect.TypeOf((*MockUsecase)(nil).ListEpisodes), ctx, req)
}

// ListSeasons mocks base method.
func (m *MockUsecase) ListSeasons(ctx context.Context, req *usecase.ListSeasonsRequest) (*usecase.ListSeasonsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSeasons", ctx, req)
	ret0, _ := ret[0].(*usecase.ListSeasonsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSeasons indicates an expected call of ListSeasons.
func (mr *MockUsecaseMockRecorder) ListSeasons(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSeasons", reflect.TypeOf((*MockUsecase)(nil).ListSeasons), ctx, req)
}

// ListSeries mocks base method.
func (m *MockUsecase) ListSeries(ctx context.Context, req *usecase.ListSeriesRequest) (*usecase.ListSeriesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSeries", ctx, req)
	ret0, _ := ret[0].(*usecase.ListSeriesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSeries indicates an expected call of ListSeries.
func (mr *MockUsecaseMockRecorder) ListSeries(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSeries", reflect.TypeOf((*MockUsecase)(nil).ListSeries), ctx, req)
}
