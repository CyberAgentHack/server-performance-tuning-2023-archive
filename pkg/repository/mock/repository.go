// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	ent "github.com/CyberAgentHack/server-performance-tuning-2023/ent"
	repository "github.com/CyberAgentHack/server-performance-tuning-2023/pkg/repository"
	gomock "github.com/golang/mock/gomock"
)

// MockEpisode is a mock of Episode interface.
type MockEpisode struct {
	ctrl     *gomock.Controller
	recorder *MockEpisodeMockRecorder
}

// MockEpisodeMockRecorder is the mock recorder for MockEpisode.
type MockEpisodeMockRecorder struct {
	mock *MockEpisode
}

// NewMockEpisode creates a new mock instance.
func NewMockEpisode(ctrl *gomock.Controller) *MockEpisode {
	mock := &MockEpisode{ctrl: ctrl}
	mock.recorder = &MockEpisodeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEpisode) EXPECT() *MockEpisodeMockRecorder {
	return m.recorder
}

// GetCount mocks base method.
func (m *MockEpisode) GetCount(ctx context.Context, id string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCount", ctx, id)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCount indicates an expected call of GetCount.
func (mr *MockEpisodeMockRecorder) GetCount(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCount", reflect.TypeOf((*MockEpisode)(nil).GetCount), ctx, id)
}

// List mocks base method.
func (m *MockEpisode) List(ctx context.Context, params *repository.ListEpisodesParams) (*ent.Episode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, params)
	ret0, _ := ret[0].(*ent.Episode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockEpisodeMockRecorder) List(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockEpisode)(nil).List), ctx, params)
}

// MockSeries is a mock of Series interface.
type MockSeries struct {
	ctrl     *gomock.Controller
	recorder *MockSeriesMockRecorder
}

// MockSeriesMockRecorder is the mock recorder for MockSeries.
type MockSeriesMockRecorder struct {
	mock *MockSeries
}

// NewMockSeries creates a new mock instance.
func NewMockSeries(ctrl *gomock.Controller) *MockSeries {
	mock := &MockSeries{ctrl: ctrl}
	mock.recorder = &MockSeriesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSeries) EXPECT() *MockSeriesMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockSeries) List(ctx context.Context, params *repository.ListSeriesParams) (*ent.Series, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, params)
	ret0, _ := ret[0].(*ent.Series)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockSeriesMockRecorder) List(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSeries)(nil).List), ctx, params)
}

// MockSeason is a mock of Season interface.
type MockSeason struct {
	ctrl     *gomock.Controller
	recorder *MockSeasonMockRecorder
}

// MockSeasonMockRecorder is the mock recorder for MockSeason.
type MockSeasonMockRecorder struct {
	mock *MockSeason
}

// NewMockSeason creates a new mock instance.
func NewMockSeason(ctrl *gomock.Controller) *MockSeason {
	mock := &MockSeason{ctrl: ctrl}
	mock.recorder = &MockSeasonMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSeason) EXPECT() *MockSeasonMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockSeason) List(ctx context.Context, params *repository.ListSeasonParams) (*ent.Season, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, params)
	ret0, _ := ret[0].(*ent.Season)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockSeasonMockRecorder) List(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSeason)(nil).List), ctx, params)
}
